
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

class ProductForm(StatesGroup):
    waiting_for_media = State()
    waiting_for_text = State()

@dp.message_handler(commands="start")
async def start(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(content_types=types.ContentType.ANY, state=None)
async def receive_media(message: types.Message, state: FSMContext):
    if message.content_type not in [types.ContentType.PHOTO, types.ContentType.VIDEO]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞.")
        return
    await state.update_data(media=[message])
    await ProductForm.waiting_for_media.set()
    await message.answer("–ü—Ä–∏–Ω—è–ª ‚úÖ
–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ:
–¶–µ–Ω–∞:
–¶–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏:
–ê—Ä—Ç–∏–∫—É–ª:
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
–†–∞–∑–º–µ—Ä—ã (—á–µ—Ä–µ–∑ ;)")

@dp.message_handler(state=ProductForm.waiting_for_media, content_types=types.ContentType.ANY)
async def collect_more_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media = data.get("media", [])
    if message.content_type in [types.ContentType.PHOTO, types.ContentType.VIDEO]:
        media.append(message)
        if len(media) >= 10:
            await state.update_data(media=media)
            await ProductForm.waiting_for_text.set()
            await message.answer("–ü—Ä–∏–µ–º –º–µ–¥–∏–∞ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ
–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        else:
            await state.update_data(media=media)
            await message.answer(f"–§–∞–π–ª {len(media)}/10 –ø—Ä–∏–Ω—è—Ç. –ñ–¥—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ...")
    else:
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(state=ProductForm.waiting_for_text)
async def receive_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media = data.get("media", [])
    await message.answer("üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É, –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ WebApp –∏ —Ç.–¥.
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
